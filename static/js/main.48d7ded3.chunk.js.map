{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["randomColor","require","App","useState","item","setItem","JSON","parse","localStorage","getItem","items","setItems","newitem","trim","id","uuidv4","color","luminosity","defaultPos","x","y","alert","useEffect","stringify","className","value","onChange","e","target","placeholder","onKeyPress","event","keyCode","which","type","onClick","map","index","defaultPosition","onStop","data","newArr","updatePos","style","backgroundColor","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAIIA,EAAcC,EAAQ,IAiFXC,MA/Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBACxBG,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAHlC,mBAENC,EAFM,KAECC,EAFD,KAMPC,EAAU,WACd,GAAoB,KAAhBR,EAAKS,OAAe,CACtB,IAAMD,EAAU,CACdE,GAAIC,cACJX,KAAMA,EACNY,MAAOhB,EAAY,CACjBiB,WAAY,UAEdC,WAAY,CAAEC,EAAG,IAAKC,EAAG,IAE3BT,GAAS,SAACD,GAAD,4BAAeA,GAAf,CAAsBE,OAC/BP,EAAQ,SAERgB,MAAM,gBACNhB,EAAQ,KAyBZ,OAdAiB,qBAAU,WACRd,aAAaH,QAAQ,QAASC,KAAKiB,UAAUb,MAC5C,CAACA,IAaF,sBAAKc,UAAU,MAAf,UACE,sBAAKV,GAAG,WAAR,UACE,uBACEW,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAAQsB,EAAEC,OAAOH,QAClCI,YAAY,qBACZC,WAAY,SAACH,GA5BJ,IAACI,EAEH,OAFGA,EA4BkBJ,GA3BjBK,SAAWD,EAAME,QAEhCrB,KA0BIsB,KAAK,YAEP,yBAAQC,QAASvB,EAAjB,mBAAgC,+BAAO,iBAAvC,UAEDF,EAAM0B,KAAI,SAAChC,EAAMiC,GAChB,OACE,cAAC,IAAD,CAEEC,gBAAiBlC,EAAKc,WACtBqB,OAAQ,SAACZ,EAAGa,IA3BJ,SAACA,EAAMH,GACvB,IAAII,EAAM,YAAO/B,GACjB+B,EAAOJ,GAAOnB,WAAa,CAAEC,EAAGqB,EAAKrB,EAAGC,EAAGoB,EAAKpB,GAChDT,EAAS8B,GAyBCC,CAAUF,EAAMH,IAJpB,SAOE,sBAAKM,MAAO,CAAEC,gBAAiBxC,EAAKY,OAASQ,UAAU,MAAvD,oBACMpB,EAAKA,MACT,wBAAQU,GAAG,SAASqB,QAAS,SAACR,GAAD,OA3BrBb,EA2BuCV,EAAKU,QA1B9DH,EAASD,EAAMmC,QAAO,SAACzC,GAAD,OAAUA,EAAKU,KAAOA,MAD3B,IAACA,GA2BR,mBARGV,EAAKU,WCtDPgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48d7ded3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Draggable from \"react-draggable\";\nimport { v4 as uuidv4 } from \"uuid\";\nvar randomColor = require(\"randomcolor\");\n\nfunction App() {\n  const [item, setItem] = useState(\"\");\n  const [items, setItems] = useState(\n    JSON.parse(localStorage.getItem(\"items\")) || []\n  );\n\n  const newitem = () => {\n    if (item.trim() !== \"\") {\n      const newitem = {\n        id: uuidv4(),\n        item: item,\n        color: randomColor({\n          luminosity: \"light\",\n        }),\n        defaultPos: { x: 100, y: 0 },\n      };\n      setItems((items) => [...items, newitem]);\n      setItem(\"\");\n    } else {\n      alert(\"Enter a item\");\n      setItem(\"\");\n    }\n  };\n\n  const keyPress = (event) => {\n    var code = event.keyCode || event.which;\n    if (code === 13) {\n      newitem();\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"items\", JSON.stringify(items));\n  }, [items]);\n\n  const updatePos = (data, index) => {\n    let newArr = [...items];\n    newArr[index].defaultPos = { x: data.x, y: data.y };\n    setItems(newArr);\n  };\n\n  const deleteNote = (id) => {\n    setItems(items.filter((item) => item.id !== id));\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"new-item\">\n        <input\n          value={item}\n          onChange={(e) => setItem(e.target.value)}\n          placeholder=\"Enter something...\"\n          onKeyPress={(e) => keyPress(e)}\n          type=\"message\"\n        />\n        <button onClick={newitem}>ENTER <span>{'ðŸ¤™'}</span> </button>\n      </div>\n      {items.map((item, index) => {\n        return (\n          <Draggable\n            key={item.id}\n            defaultPosition={item.defaultPos}\n            onStop={(e, data) => {\n              updatePos(data, index);\n            }}\n          >\n            <div style={{ backgroundColor: item.color }} className=\"box\">\n              {`${item.item}`}\n              <button id=\"delete\" onClick={(e) => deleteNote(item.id)}>\n                X\n              </button>\n            </div>\n          </Draggable>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}